

//******************************************* General PARAMETERS **************************************************
#include <stdlib.h>
#include <dht11.h>
#include <SD.h>
#include <SPI.h>
#include <Bridge.h>
#include <Wire.h>

File myFile;
File userFile;

bool tempData = false;

#define DHT11PIN A1
#define PowerModeSwitch A0
dht11 DHT11;
const int chipSelect = 49;

int start = 0;
unsigned long PM10duration;
unsigned long PM25duration;
unsigned long PM10lowpulseoccupancy = 0;
unsigned long PM25lowpulseoccupancy = 0;
float PM10ratio = 0;
float PM25ratio = 0;
float PM10concentration = 0;
float PM25concentration = 0;
float temperature;
float humidity;

///***********************************************new method parameters**************************************************************

// MentalMunition.com

// DESCRIPTION
// Outputs particle concentration per cubic foot and
// mass concentration (microgram per cubic meter) to
// serial, from a Shinyei particuate matter sensor.


// THEORY OF OPERATION
// Sketch measures the width of pulses through
// boolean triggers, on each channel.
// Pulse width is converted into a percent integer
// of time on, and equation uses this to determine
// particle concentration.
// Shape, size, and density are assumed for PM10
// and PM2.5 particles. Mass concentration is
// estimated based on these assumptions, along with
// the particle concentration.

unsigned long starttime;

unsigned long triggerOnP1;
unsigned long triggerOffP1;
unsigned long pulseLengthP1;
unsigned long durationP1;

boolean RESETDURATION = false;
boolean valP1 = HIGH;
boolean triggerP1 = false;

unsigned long triggerOnP2;
unsigned long triggerOffP2;
unsigned long pulseLengthP2;
unsigned long durationP2;
boolean valP2 = HIGH;
boolean triggerP2 = false;

float ratioP1 = 0;
float ratioP2 = 0;
unsigned long sampletime_ms = 30000;
float countP1;
float countP2;

/////********************************************************************************************************************************

//********************************* GPS Data **************************************************
#include <call.h>
#include <gps.h>
#include <GSM.h>
#include <HWSerial.h>
#include <inetGSM.h>
#include <LOG.h>
#include <SIM900.h>
#include <sms.h>
#include <Streaming.h>
#include <WideTextFinder.h>

//#include "TinyGPS.h"
#include <TinyGPS.h>
TinyGPS gps;

#define GPS_TX_DIGITAL_OUT_PIN 7
#define GPS_RX_DIGITAL_OUT_PIN 6

long startMillis;
long secondsToFirstLocation = 0;

#define DEBUG
// define the date and time
int year = 0;
byte month = 0;
byte day = 0;
byte hour = 0;
byte minute = 0;
byte second = 0;
byte hundredths = 0;

// define the location 
float latitude = 0.0;
float longitude = 0.0;
float altitude = 0.0;

// define the speed, satellites and precision
float speed_mps = 0.0;
float satellites = 0.0;
float hdop = 0.0;

//********************************* SMS Data ********************************************
#include <call.h>
#include <gps.h>
#include <GSM.h>
#include <HWSerial.h>
#include <inetGSM.h>
#include <LOG.h>
#include <SIM900.h>
#include <sms.h>
#include <Streaming.h>
#include <WideTextFinder.h>
#include <string.h>

// define SMS 
char sms_rx[122]; //Received text SMS
byte type_sms=SMS_ALL;      //Type of SMS
byte del_sms=1;                //0: No deleting sms - 1: Deleting SMS
char number_incoming[20];
char data_sms[140];

SMSGSM sms;
int error;
boolean started=false;
bool newData = false;

// define conponents in message
char sms_temperature[6];
char sms_humidity[6];
char sms_ratio[6];
char sms_concentration[20];
char sms_year[4];
char sms_mon[3];
char sms_day[3];
char sms_hour[3];
char sms_min[3];
char sms_sec[3];
char sms_lon[12];
char sms_lat[12];
char sms_datalog[2];;

//************************* Define the thingspeak information *****************************
InetGSM inet;

char msg[50];
int numdata;
char inSerial[50];
int i = 0;
long channelId = XXXXX;
char datastreamId[] = "1";
bool GPSworks = false;
int failtimes = 0;
int datalog = 0; // to tell if Arduino is recording all data to SD card. 0 - false; 1 - true;

// ThingSpeak Channel: BODABODA 5B3 channel
char thingSpeakAddress[] = "xxx.xxx.xxx.xxx";
char writeAPIKey[] = "xxxxxxxxxx";
char sentMsg[50];


//************************************************************************************************
void setup()
{ 
  Serial.begin(9600);
  pinMode(22, INPUT);
  pinMode(23, INPUT);
  Serial.println("Pre-Charge Mode(Wait 60 seconds)");
  //delay(60000);
 
  
  //**********Initialize GPS function********//
  // Serial2 is GPS
  Serial2.begin(9600);

 // pinMode(PowerModeSwitch, OUTPUT);
 // digitalWrite(PowerModeSwitch, HIGH);
  
  // prevent controller pins 7 and 6 from interfering with the comms from GPS
  pinMode(GPS_TX_DIGITAL_OUT_PIN, INPUT);
  pinMode(GPS_RX_DIGITAL_OUT_PIN, INPUT);
 
  startMillis = millis();
  Serial.println("GPS is starting");
  
  //**********Initialnize GSM function********//
  
  startupGSM900();
  if(started)
  {
    //delete all sms message
//    Serial.println("Deleting SMS");
//    char error = DeleteAllSMS();
//    if (error==1)
//      {Serial.println("All SMS deleted");}      
//    else
//     {Serial.println("SMS not deleted");} 
    // attach the GPRS
    startupGPRS();
  }
  else
  {Serial.println("SIM900 NOT EXISTED"); }
  
  //***********Initialnize SD card***********// 
  Serial.print("Initializing SD card...");
  if (!SD.begin(chipSelect)) { 
    Serial.println("initialization failed!");
    return;
  }
  Serial.println("Done.");
  Serial.println(' ');
  pinMode(12,INPUT);
  starttime = millis();// start timer, millis() means current time
}
//************************************ Loop function *********************************************

//************************************************************************************************
double Fahrenheit(double celsius) //Celsius to Fahrenheit conversion
{
  return 1.8 * celsius + 32;
}

//************************************************************************************************
void startupGSM900()
{
  if (gsm.begin(9600)) {
       Serial.println("\nGSM status = READY");
       gsm.forceON();        //To ensure that SIM908 is not only in charge mode
       started=true;
  } else Serial.println("\nGSM status = IDLE");
}

//************************************************************************************************
void startupGPRS()
{
  gsm.SimpleWrite("AT");
    delay(1000);
    gsm.WhileSimpleRead();
    //GPRS attach, put in order APN, username and password.
    //If no needed auth let them blank.

    if (inet.attachGPRS("internet", "", ""))
    Serial.println("status=ATTACHED");
    else Serial.println("status=ERROR");
    delay(1000);

    gsm.SimpleWriteln("AT+CIPSTATUS");
    //gsm.SimpleWriteln("AT+CIPMUX=0");
    //Read IP address.
    gsm.SimpleWriteln("AT+CIFSR");

    delay(5000);

    //Read until serial buffer is empty.
    gsm.WhileSimpleRead();
}

//************************************************************************************************

void loop(){
  
  valP1 = digitalRead(22);
  valP2 = digitalRead(23);

  if(RESETDURATION == true){
    Serial.println("***RESETing DURATION*** ");
        triggerOnP1 = 0;
        triggerOffP1 = 0;
        pulseLengthP1 = 0;
        durationP1 = 0;
        valP1 = HIGH;
        triggerP1 = false;
        
        triggerOnP2 = 0;
        triggerOffP2 = 0;
        pulseLengthP2 = 0;
        durationP2 = 0;
        valP2 = HIGH;
        triggerP2 = false;
        
        ratioP1 = 0;
        ratioP2 = 0;
        countP1 = 0;
        countP2 = 0;
        RESETDURATION = false;
    }
  
  if(valP1 == LOW && triggerP1 == false){
    triggerP1 = true;
    triggerOnP1 = micros();
  }
  
  if (valP1 == HIGH && triggerP1 == true){
      triggerOffP1 = micros();
      pulseLengthP1 = triggerOffP1 - triggerOnP1;
      durationP1 = durationP1 + pulseLengthP1;
      triggerP1 = false;
       Serial.print("IN THE LOOP PM 1 - 10 low pulse occupancy is : ");
      Serial.println(durationP1);
  }
  
    if(valP2 == LOW && triggerP2 == false){
    triggerP2 = true;
    triggerOnP2 = micros();
  }
  
    if (valP2 == HIGH && triggerP2 == true){
      triggerOffP2 = micros();
      pulseLengthP2 = triggerOffP2 - triggerOnP2;
      durationP2 = durationP2 + pulseLengthP2;
      triggerP2 = false;
       Serial.print("IN THE LOOP PM 2.5 - 10 low pulse occupancy is : ");
      Serial.println(durationP2);
  }

  
    // Function creates particle count and mass concentration
    // from PPD-42 low pulse occupancy (LPO).  
    if ((millis() - starttime) > sampletime_ms) {

      RESETDURATION = true;
       // Generates PM10 and PM2.5 count from LPO.
      // Derived from code created by Chris Nafis
      // http://www.howmuchsnow.com/arduino/airquality/grovedust/
      
      ratioP1 = durationP1/(sampletime_ms*10.0);  // Integer percentage 0=>100
      ratioP2 = durationP2/(sampletime_ms*10.0);

      PM25ratio =   ratioP2;// ratio is the percentage of low pulse duration in one period, from 0 to 100. 
      PM10ratio =   ratioP1;// ratio is the percentage of low pulse duration in one period, from 0 to 100.
      
      countP1 = 1.1*pow(ratioP1,3)-3.8*pow(ratioP1,2)+520*ratioP1+0.62;
      countP2 = 1.1*pow(ratioP2,3)-3.8*pow(ratioP2,2)+520*ratioP2+0.62;
      float PM10count = countP2;
      float PM25count = countP1 - countP2;

       // Assues density, shape, and size of dust
      // to estimate mass concentration from particle
      // count. This method was described in a 2009
      // paper by Uva, M., Falcone, R., McClellan, A.,
      // and Ostapowicz, E.
      // http://wireless.ece.drexel.edu/research/sd_air_quality.pdf
      
      // begins PM10 mass concentration algorithm
      // first, PM10 count to mass concentration conversion
      double r10 = 2.6*pow(10,-6);
      double pi = 3.14159;
      double vol10 = (4.0/3.0)*pi*pow(r10,3);
      double density = 1.65*pow(10,12);
      double mass10 = density*vol10;
      double K = 3531.5;
      float concLarge = (PM10count)*K*mass10;
      
      // next, PM2.5 count to mass concentration conversion
      double r25 = 0.44*pow(10,-6);
      double vol25 = (4.0/3.0)*pi*pow(r25,3);
      double mass25 = density*vol25;
      float concSmall = (PM25count)*K*mass25;

                            
                                                   
                              Read_DHT();
                              Read_Status(PM10count, PM25count, concLarge, concSmall);
                              readLocation();
                              Check_SMS();
                              recordAllData(PM10count, PM25count, concLarge, concSmall, durationP2, durationP1);
                             // if(GPSworks == true){
                                                  char toPostLat[20];
                                                  char toPostLon[20];
                                                  dtostrf(latitude, 6, 6, toPostLat);
                                                  dtostrf(longitude, 6, 6, toPostLon);
                                                  thingspeakPost(PM10count, PM25count, concLarge, concSmall, toPostLat, toPostLon);
                             // }                       
                                                       
                              Serial.println();
                              Serial.println("PM10 count,PM2.5 count,PM10 conc,PM2.5 conc");
                              Serial.print(PM10count);
                              Serial.print(",");
                              Serial.print(PM25count);
                              Serial.print(",");
                              Serial.print(concLarge);
                              Serial.print(",");
                              Serial.println(concSmall);
                            
                              durationP1 = 0;
                              durationP2 = 0;
                              starttime = millis();
                                                                                      
         }   
    
     
}
  



void Read_DHT()
{
  //********Check the temperature and humanity sensor status**********//
  int chk = DHT11.read(DHT11PIN);
  Serial.print("Read sensor: ");
  switch (chk)
  {
    case DHTLIB_OK: 
    Serial.println("OK");
    tempData = true; 
    break;
    case DHTLIB_ERROR_CHECKSUM: 
    Serial.println("Checksum error"); 
    break;
    case DHTLIB_ERROR_TIMEOUT: 
    Serial.println("Time out error"); 
    break;
    default: 
    Serial.println("Unknown error"); 
    break;
  }
}

void Read_Status(float PM10COUNT, float PM25COUNT, float PM10CONCENTRATION, float PM25CONCENTRATION)
{
   
  Serial.print("Temperature (°C): ");
  Serial.println((float)DHT11.temperature, 2);  
  Serial.print("Humidity (%): ");
  Serial.println((float)DHT11.humidity, 2);
  Serial.print("Temperature (°F): ");
  Serial.println(Fahrenheit(DHT11.temperature), 2);
  Serial.print("PM 2.5 lowpulseoccupancy :");
  Serial.print(durationP2);
  Serial.print("us = ");
  Serial.print (durationP2/1000);
  Serial.print("ms");
  Serial.print(" | ");
  Serial.print("PM 2.5 RATIO : ");
  Serial.print(PM25ratio);
  Serial.print(" | ");
  Serial.print("PM 2.5 COUNT : ");
  Serial.print(PM25COUNT);
  Serial.print("pcs/283ml");
  Serial.print(" | ");  
  Serial.print("PM 2.5 CONCENTRATION : ");
  Serial.println(PM25CONCENTRATION);  

  Serial.print("PM10 lowpulseoccupancy :");
  Serial.print(durationP1);
  Serial.print("us = ");
  Serial.print (durationP1/1000);
  Serial.print("ms");
  Serial.print(" | ");
  Serial.print("PM 10 ratio : ");
  Serial.print(PM10ratio);
  Serial.print(" | ");
  Serial.print("PM 10 COUNT : ");
  Serial.print(PM10COUNT);
  //Serial.print(PM10concentration);
  Serial.print("pcs/283ml");
  Serial.print(" | ");  
  Serial.print("PM 10 CONCENTRATION : ");
  Serial.println(PM10CONCENTRATION);  

}


//************************************************************************************************
void Check_SMS()  //Check if there is an sms 'type_sms'
 {
     char pos_sms_rx;  //Received SMS position     
     pos_sms_rx=sms.IsSMSPresent(type_sms);
     if (pos_sms_rx!=0)
     {
       //Read text/number/position of sms
       sms.GetSMS(pos_sms_rx,number_incoming,15,sms_rx,120);
       Serial.print("Received SMS from ");
       Serial.print(number_incoming);
       Serial.print("(sim position: ");
       Serial.print(word(pos_sms_rx));
       Serial.println(")");
       Serial.println(sms_rx);
       if (del_sms==1)  //If 'del_sms' is 1, i delete sms 
       {
         error=sms.DeleteSMS(pos_sms_rx);
         if (error==1)Serial.println("SMS deleted");      
         else Serial.println("SMS not deleted");
       }

       // Check the receiving message is "air"
       if((strstr(sms_rx,"air")!=0)&&(strlen(sms_rx)==3))
       {
          // store the coming number in SD card
          recordUserData();

          // send the message
          Serial.println("\nsending SMS");
          // if newData is true, that means there is new data received from GPS.
          if(newData)
          {
            if (sms.SendSMS(number_incoming, data_sms))
              Serial.println("\nSMS sent OK");
            else
              Serial.println("\nSMS sent error");        
          }
          else
          {
            if (sms.SendSMS(number_incoming, "GPS is not ready."))
              Serial.println("\nSMS sent OK");
            else
              Serial.println("\nSMS sent error");                                                
          }                                 
       }
     Serial2.flush();
                 
     }
     newData = false;
     return;
 }

//***************************************************************************************************//
char DeleteAllSMS()
{
     char ret_val = -1;
     
     if (CLS_FREE != gsm.GetCommLineStatus()) return (ret_val);
     gsm.SetCommLineStatus(CLS_ATCMD);
     ret_val = 0; // still not present
          
     gsm.SimpleWriteln(F("AT+CMGDA=\"DEL ALL\""));
          
     switch (gsm.WaitResp(8000, 50, "OK")) {
     case RX_TMOUT_ERR:
          // response was not received in specific time
          ret_val = -2;
          break;
 
     case RX_FINISHED_STR_RECV:
          // OK was received => SMS deleted
          ret_val = 1;
          break;
 
     case RX_FINISHED_STR_NOT_RECV:
          // other response: e.g. ERROR => SMS was not deleted
          ret_val = 0;
          break;
     }
     
     gsm.SetCommLineStatus(CLS_FREE);
     return (ret_val);         
}


//***************************************************************************************************//
void readLocation(){
  
  unsigned long chars = 0;
  unsigned short sentences, failed;

  // For one second we parse GPS data and report some key values
  for (unsigned long start = millis(); millis() - start < 1000;)
  {
    while (Serial2.available())
    {
      int c = Serial2.read();
      //Serial.print((char)c); // if you uncomment this you will see the raw data from the GPS
      ++chars;
      if (gps.encode(c)) // Did a new valid sentence come in?
        newData = true;
    }
  }
  
  if (newData)
  {
    // we have a location fix so output the lat / long and time to acquire
    if(secondsToFirstLocation == 0){
      secondsToFirstLocation = (millis() - startMillis) / 1000;
      Serial.print("Acquired in:");
      Serial.print(secondsToFirstLocation);
      Serial.println("s");
    }
    
    unsigned long age;
    // extract related data from GPS signal
    gps.crack_datetime(&year, &month, &day, &hour, &minute, &second, &hundredths, &age);
    
    gps.f_get_position(&latitude, &longitude, &age);    
    latitude == TinyGPS::GPS_INVALID_F_ANGLE ? 0.0 : latitude;
    longitude == TinyGPS::GPS_INVALID_F_ANGLE ? 0.0 : longitude;
    
    altitude = gps.f_altitude();
    altitude == TinyGPS::GPS_INVALID_F_ALTITUDE ? 0.0 : altitude;
    
    speed_mps = gps.f_speed_mps();
    speed_mps == TinyGPS::GPS_INVALID_F_SPEED ? 0.0 : speed_mps;

    satellites = gps.satellites();
    satellites == TinyGPS::GPS_INVALID_SATELLITES ? 0 : satellites;

    hdop = gps.hdop();
    hdop == TinyGPS::GPS_INVALID_HDOP ? 0.0 : hdop;

    Serial.println("GPS is working!");
    GPSworks = true;

    //********** Convert the existing data into string *****************//
    dtostrf(DHT11.temperature, 5, 2, sms_temperature);
    dtostrf(DHT11.humidity, 5, 2, sms_humidity);
    dtostrf(PM10ratio, 5, 2, sms_ratio);
    dtostrf(PM10concentration, 8, 2, sms_concentration);
   // itostr(concentration, 8, 2, sms_concentration);
    dtostrf(latitude, 10, 6, sms_lat); 
    dtostrf(longitude, 10 , 6, sms_lon);
    
    
    //********** Combine strings into the data message *****************//
    strcpy(data_sms,"Temperature:");    
    strcat(data_sms,sms_temperature);
    strcat(data_sms,"\n");
    strcat(data_sms,"Humidity:"); 
    strcat(data_sms,sms_humidity);
    strcat(data_sms,"\n");
    strcat(data_sms,"ratio:");
    strcat(data_sms,sms_ratio);
    strcat(data_sms,"\n");
    //strcat(data_sms,"Concentration:");
    //strcat(data_sms,sms_concentration);
    //strcat(data_sms,"\n");
//    strcat(data_sms,"CarbonMonoxide:");
//    strcat(data_sms,sms_CarbonMonoxide);
    strcat(data_sms,"\n");
    strcat(data_sms,"Latitude:");
    strcat(data_sms,sms_lat);
    strcat(data_sms,"\n");
    strcat(data_sms,"Longitude:");
    strcat(data_sms,sms_lon);    
    strcat(data_sms,"\n");

    //we comment the following part so that there will be no time infomation in the message which is prepared to send for user.
    /*
    strcat(data_sms,"Time:");

    itoa(year,sms_year,10);
    strcat(data_sms,sms_year);
         
    itoa(month,sms_mon,10);
    if(strlen(sms_mon)==1)
      strcat(data_sms,"0");
    strcat(data_sms,sms_mon);
         
    itoa(day,sms_day,10);
    if(strlen(sms_day)==1)
      strcat(data_sms,"0");
    strcat(data_sms,sms_day);
         
    itoa(hour,sms_hour,10);
    if(strlen(sms_hour)==1)
      strcat(data_sms,"0");
    strcat(data_sms,sms_hour);
         
    itoa(minute,sms_min,10);
    if(strlen(sms_min)==1)
      strcat(data_sms,"0");
    strcat(data_sms,sms_min);
         
    itoa(second,sms_sec,10);
    if(strlen(sms_sec)==1)
      strcat(data_sms,"0");
    strcat(data_sms,sms_sec);
    */
  }

  // print out the message in I/O port for checking
  Serial.println(data_sms);
  
  if (chars == 0){
    // if you haven't got any chars then likely a wiring issue
    Serial.println("Check wiring");
  }
  else if(secondsToFirstLocation == 0){
    // still working
  }
}


//*************************************************************************************************************
void recordAllData(float PM10COUNT, float PM25COUNT, float PM10CONCENTRATION, float PM25CONCENTRATION, float PM10LOWOCCUPANCY, float PM25LOWOCCUPANCY)
{
char toPostPM10RATIO[20];
char toPostPM10CONCENTRATION[20];
char toPostPM25RATIO[20];
char toPostPM25CONCENTRATION[20];
char toPostPM10LowOccupancy[20];
char toPostPM25LowOccupancy[20];
char toPostPM10COUNT[20];
char toPostPM25COUNT[20];


dtostrf(PM10ratio, 8, 2, toPostPM10RATIO);
dtostrf(PM10CONCENTRATION, 8, 2, toPostPM10CONCENTRATION);
dtostrf(PM25ratio, 8, 2, toPostPM25RATIO);
dtostrf(PM25CONCENTRATION, 8, 2, toPostPM25CONCENTRATION);

dtostrf(PM10COUNT, 8, 2, toPostPM10COUNT);
dtostrf(PM25COUNT, 8, 2, toPostPM25COUNT);

  myFile = SD.open("AQULDA.txt", FILE_WRITE);
  if (myFile) {
    Serial.print("Writing to AQULDA.txt...");
    //myFile.print("Temperature: "); 
     myFile.println(' ');    
    myFile.print((float)DHT11.temperature, 2);
    myFile.print("\t"); 
    myFile.print((float)DHT11.humidity, 2);
    myFile.print("\t");
    myFile.print(PM10LOWOCCUPANCY);
    myFile.print("\t");
    myFile.print(toPostPM10RATIO);
    myFile.print("\t");
    myFile.print(toPostPM10COUNT);
    myFile.print("\t");
    myFile.print(toPostPM10CONCENTRATION);
    myFile.print("\t");
    myFile.print("\t");
    myFile.print(PM25LOWOCCUPANCY);
    myFile.print("\t");
    myFile.print(toPostPM25RATIO);
    myFile.print("\t");
    myFile.print(toPostPM25COUNT);
    myFile.print("\t");
    myFile.print(toPostPM25CONCENTRATION);
    myFile.print("\t");
    myFile.print("\t");
    myFile.print("\t");
    myFile.print("\t");
    
    myFile.print("\t");
    myFile.print(year);
    myFile.print(",");
    myFile.print(month);
    myFile.print(",");
    myFile.print(day);
    myFile.print("  ");
    myFile.print(hour);
    myFile.print(":");
    myFile.print(minute);
    myFile.print(":");
    myFile.print(second);
    myFile.print(":");
    myFile.print(hundredths);
    myFile.print("\t: ");
    myFile.print(latitude, 6);
    myFile.print(" , ");
    myFile.print(longitude, 6);
    myFile.print(" , ");
    myFile.print(altitude, 6);
    myFile.print("SAT=");
    myFile.print(satellites, 0);
    myFile.print(" PREC=");
    myFile.print(hdop/100);
    myFile.print(" Speed= ");
    myFile.print(speed_mps);
    myFile.print("m/s");
    //myFile.println(' '); 
    myFile.close();   
    Serial.println("OK.");
    datalog = 1;
  } else {
    // if the file didn't open, print an error:
    Serial.println("error in opening AQULDA.txt");  
    datalog = 0;
  }
}


//***********************************************************************
void recordUserData()
{
    userFile = SD.open("users.txt", FILE_WRITE);
    if (userFile) {
        Serial.println("Recording the user number...");
        userFile.print("Received SMS from ");
        userFile.print(number_incoming);
        userFile.print(" at ");
        userFile.print(year); 
        userFile.print(",");
        userFile.print(month);
        userFile.print(",");
        userFile.print(day);
        userFile.print("  ");
        userFile.print(hour);
        userFile.print(":");
        userFile.print(minute);
        userFile.print(":");
        userFile.println(second);
        Serial.println("OK.");
    }
    userFile.close();
}

void thingspeakPost(float PM10COUNT, float PM25COUNT, float PM10CONCENTRATION, float PM25CONCENTRATION, char LATITUDE[20], char LONGITUDE[20]) {
  char itoaBuffer[8];

  char end_c[2];
  end_c[0] = 0x1A;
  //end_c[1] = '\0';
  

if (inet.connectTCP(thingSpeakAddress, 80)) {

   Serial.println("connected to thingspeak");

    gsm.SimpleWrite("POST /update HTTP/1.1\r\n");
    gsm.SimpleWrite("Host: api.thingspeak.com\r\n");
    gsm.SimpleWrite("Connection: close\r\n");
    gsm.SimpleWrite("X-THINGSPEAKAPIKEY: ");
    gsm.SimpleWrite(writeAPIKey);
    gsm.SimpleWrite("\r\n");
    gsm.SimpleWrite("Content-Type: application/x-www-form-urlencoded\r\n");
    gsm.SimpleWrite("Content-Length: ");


char toPostTempearture[20];
char toPostHumidity[20];
char toPostPM10COUNT[20];
char toPostPM10CONCENTRATION[20];
char toPostPM25COUNT[20];
char toPostPM25CONCENTRATION[20];


dtostrf(DHT11.temperature, 8, 2, toPostTempearture);
dtostrf(DHT11.humidity, 8, 2, toPostHumidity);
dtostrf(PM10COUNT, 8, 2, toPostPM10COUNT);
dtostrf(PM10CONCENTRATION, 8, 2, toPostPM10CONCENTRATION);
dtostrf(PM25COUNT, 8, 2, toPostPM25COUNT);
dtostrf(PM25CONCENTRATION, 8, 2, toPostPM25CONCENTRATION);
//JOEEEEE

    sprintf(sentMsg, "field1=%s&field2=%s&field3=%s&field4=%s&field5=%s&field6=%s&field7=%s&field8=%s",toPostTempearture,toPostHumidity,toPostPM10COUNT,toPostPM10CONCENTRATION,toPostPM25COUNT,toPostPM25CONCENTRATION,LATITUDE,LONGITUDE);
  //sprintf(sentMsg, "field1=%s&field2=%s&field3=%s&field4=%s&field5=%s&field6=%s&field7=%d",toPostTempearture,toPostHumidity,toPostPM10COUNT,toPostPM10CONCENTRATION,toPostPM25COUNT,toPostPM25CONCENTRATION,datalog);
    itoa(strlen(sentMsg), itoaBuffer, 10);

    gsm.SimpleWrite(itoaBuffer);

    gsm.SimpleWrite("\r\n\r\n");

    gsm.SimpleWrite(sentMsg);

    gsm.SimpleWrite("\r\n\r\n");

    delay(200);
    
    gsm.SimpleWrite(end_c);
    
    
    //gsm.SimpleWrite("AT+CIPCLOSE");

    Serial.println(sentMsg);

    //************************
    failtimes = 0;
    //RESETPARAMS();
  }
  else
  {
    Serial.println("Uploading failed");
    failtimes = failtimes + 1 ;
    Serial.print("Fail times now is; ");
    Serial.println(failtimes);
    if (failtimes == 2)
    {
      Serial.println("System will restart the GSM and GPRS");
//    delay(30000);
      startupGSM900();
      startupGPRS();
      failtimes = 0;
      //RESETPARAMS();      
    }
  }
}
